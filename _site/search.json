[
  {
    "objectID": "block_1/511_python/511_python.html",
    "href": "block_1/511_python/511_python.html",
    "title": "Python Basics",
    "section": "",
    "text": "int, float, str, bool, list, tuple, dict, set, None\n\n\n\n\n\n\n\n\n\nOperation\nDescription\n\n\n\n\nlen(text)\nLength of text\n\n\ntext.upper()\nUppercase\n\n\ntext.lower()\nLowercase\n\n\ntext.capitalize()\nCapitalize first letter\n\n\ntext.title()\nCapitalize first letter of each word\n\n\ntext.strip()\nRemove leading and trailing whitespace\n\n\ntext.split(' ')\nSplit string into list of words, using ’ ’ as delimiter. Default delimiter is ’ ’.\n\n\n\n\n\n\n\n\n\n\n\n\n\nOperation\nDescription\n\n\n\n\nlen(list)\nLength of list\n\n\nlist.append(item)\nAppend item to end of list\n\n\nlist.insert(index, item)\nInsert item at index\n\n\nlist.pop(n)\nRemove and return item at index n. Default n is -1\n\n\nsorted(list)\nReturns a new sorted list without modifying original list\n\n\nlist.sort()\nSort list in ascending order. To sort in descending order, use list.sort(reverse=True). (edit original list)\n\n\nlist.reverse()\nReverse list in place (edit original list)\n\n\n\n\n\n\n\n\n\n\n\n\n\nOperation\nDescription\n\n\n\n\nCreate dictionary\ndict = {'key1': 'value1', 'key2': 'value2'} or dict = dict(key1='value1', key2='value2')\n\n\nCreate empty dictionary\ndict = {} or dict = dict()\n\n\ndict['key']\nGet value of key\n\n\ndict.get('key', default)\nGet value of key, if key does not exist, return default value\n\n\ndict.pop('key')\nRemove and return value of key\n\n\ndict.keys()\nReturn list of keys\n\n\ndict.values()\nReturn list of values\n\n\ndict.items()\nReturn list of tuples (key, value)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeature\nList\nTuple\nDictionary (dict)\nSet\n\n\n\n\nMutable\nYes\nNo\nYes\nYes\n\n\nOrdered\nYes\nYes\nNo\nNo\n\n\nIndexing\nBy index (0-based)\nBy index (0-based)\nBy key\nNo\n\n\nDuplicates\nAllowed\nAllowed\nKeys must be unique\nDuplicates not allowed\n\n\nModification\nCan change elements\nCannot change elements\nValues can be updated\nElements can be added/removed\n\n\nSyntax\nSquare brackets []\nParentheses ()\nCurly braces {}\nCurly braces {}\n\n\nUse Case\nWhen order matters\nWhen data should not change\nMapping keys to values\nFor unique values and set operations\n\n\nExample\n[1, 2, 'three']\n(1, 2, 'three')\n{'name': 'Alice', 'age': 30}\n{'apple', 'banana', 'cherry'}\n\n\n\n\n\n\n\n    # syntax: [expression for item in list]\n    # syntax: [expression for item in list if condition]\n    # syntax: [expression if condition else other_expression for item in list]\n    words = [\"the\", \"list\", \"of\", \"words\"]\n\n    x = [len(word) for word in words] # [3, 4, 2, 5]\n    x = [word for word in words if len(word) &gt; 2] # [\"the\", \"list\", \"words\"]\n    x = [word if len(word) &gt; 2 else \"short\" for word in words] # [\"the\", \"short\", \"short\", \"words\"]\n\n\n\n    # syntax: value_if_true if condition else value_if_false\n    words = [\"the\", \"list\", \"of\", \"words\"]\n\n    x = \"long list\" if len(words) &gt; 10 else \"short list\"\n\n\n\n    try:\n        # code that might raise an exception\n    except:\n        # code to handle exception\n        raise TypeError(\"Error message\") # raise exception\n\n\n\n    def function_name(arg1, arg2, arg3=default_value): # default values are optional\n        # code\n        return value\n\n    def function_name(*args): # takes in multiple arguments\n        for arg in args:\n            # code\n        return value\n\nside effects: If a function does anything other than returning a value, it is said to have side effects. An example of this is when a function changes the variables passed into it, or when a function prints something to the screen.\n\n\n\n    # Syntax: lambda arg1, arg2: expression\n    lambda x: x+1\n\n\n\n    # NumPy/SciPy style\n    def repeat_string(s, n=2):\n        \"\"\"\n        Repeat the string s, n times.\n\n        Parameters\n        ----------\n        s : str\n            the string\n        n : int, optional\n            the number of times, by default = 2\n\n        Returns\n        -------\n        str\n            the repeated string\n\n        Examples\n        --------\n        &gt;&gt;&gt; repeat_string(\"Blah\", 3)\n        \"BlahBlahBlah\"\n        \"\"\"\n        return s * n\n\n\n\n    def repeat_string(s: str, n: int = 2) -&gt; str:\n        return s * n\n\n\n\n\n    class ClassName:\n        def __init__(self, arg1, arg2):\n            # code\n        def method_name(self, arg1, arg2):\n            # code\n        @classmethod\n        def other_method_name(cls, arg1, arg2):\n            # classmethod is used to create factory methods, aka other ways to create objects\n            # code\n\n    # Inheritance\n    class SubClassName(ClassName):\n        def __init__(self, arg1, arg2):\n            super().__init__(arg1, arg2)\n            # code\n        def method2_name(self, arg1, arg2):\n            # code\n\n\n    class ClassName:\n        static_var = 0\n\n        @staticmethod\n        def method_name(arg1, arg2):\n            # code\n            ClassName.static_var += 1\n            return ClassName.static_var\n        @staticmethod\n        def reset_static_var():\n            ClassName.static_var = 0\n\n\n\n    class TestVector(unittest.TestCase):\n        def test_str1(self):\n            v1 = Vector(1, 2, 3)\n            self.assertIn(\"Vector = [1, 2, 3]\", v1.__str__())\n            self.assertEqual(len(v1.elements), 3)\n\n        def test_str2(self):\n            v1 = Vector(500)\n            self.assertIn(\"Vector = [500]\", v1.__str__())\n\n\n    TestVector = unittest.main(argv=[\"\"], verbosity=0, exit=False)\n    assert TestVector.result.wasSuccessful()\n\n\n\n\n\n\n\n\n\n\n\n\nCategory\nRule/Convention\nExample\n\n\n\n\nIndentation\nUse 4 spaces per indentation level\nif x: # four spaces here\n\n\n\nUse spaces around operators and after commas\na = b + c, d = e + f\n\n\nMaximum Line Length\nLimit all lines to a maximum of 79 characters for code, 72 for comments and docstrings\n\n\n\nImports\nAlways put imports at the top of the file\nimport os\n\n\n\nGroup imports: standard, third-party, local\nimport os import numpy as np from . import my_module\n\n\n\nUse absolute imports\nfrom my_pkg import module\n\n\nWhitespace\nAvoid extraneous whitespace\nspam(ham[1], {eggs: 2})\n\n\n\nUse blank lines to separate functions, classes, blocks of code inside functions\n\n\n\nComments\nComments should be complete sentences\n# This is a complete sentence.\n\n\n\nUse inline comments sparingly\nx = x + 1 # Increment x\n\n\nNaming Conventions\nFunction names should be lowercase with underscores\nmy_function()\n\n\n\nClass names should use CapWords convention\nMyClass\n\n\n\nConstants should be in all capital letters\nCONSTANT_NAME\n\n\nString Quotes\nUse double quotes for docstrings and single quotes for everything else when you start a project (or adhere to the project’s conventions)\n‘string’, “““docstring”“”\n\n\nExpressions and Statements\nDon’t use semicolons to terminate statements\nx = 1 (not x = 1;)\n\n\n\nUse is for identity comparisons and == for value comparisons\nif x is None\n\n\nOther Recommendations\nUse built-in types like list, dict instead of List, Dict from the typing module for simple use-cases\ndef func(a: list) -&gt; None:"
  },
  {
    "objectID": "block_1/511_python/511_python.html#data-types",
    "href": "block_1/511_python/511_python.html#data-types",
    "title": "Python Basics",
    "section": "",
    "text": "int, float, str, bool, list, tuple, dict, set, None\n\n\n\n\n\n\n\n\n\nOperation\nDescription\n\n\n\n\nlen(text)\nLength of text\n\n\ntext.upper()\nUppercase\n\n\ntext.lower()\nLowercase\n\n\ntext.capitalize()\nCapitalize first letter\n\n\ntext.title()\nCapitalize first letter of each word\n\n\ntext.strip()\nRemove leading and trailing whitespace\n\n\ntext.split(' ')\nSplit string into list of words, using ’ ’ as delimiter. Default delimiter is ’ ’.\n\n\n\n\n\n\n\n\n\n\n\n\n\nOperation\nDescription\n\n\n\n\nlen(list)\nLength of list\n\n\nlist.append(item)\nAppend item to end of list\n\n\nlist.insert(index, item)\nInsert item at index\n\n\nlist.pop(n)\nRemove and return item at index n. Default n is -1\n\n\nsorted(list)\nReturns a new sorted list without modifying original list\n\n\nlist.sort()\nSort list in ascending order. To sort in descending order, use list.sort(reverse=True). (edit original list)\n\n\nlist.reverse()\nReverse list in place (edit original list)\n\n\n\n\n\n\n\n\n\n\n\n\n\nOperation\nDescription\n\n\n\n\nCreate dictionary\ndict = {'key1': 'value1', 'key2': 'value2'} or dict = dict(key1='value1', key2='value2')\n\n\nCreate empty dictionary\ndict = {} or dict = dict()\n\n\ndict['key']\nGet value of key\n\n\ndict.get('key', default)\nGet value of key, if key does not exist, return default value\n\n\ndict.pop('key')\nRemove and return value of key\n\n\ndict.keys()\nReturn list of keys\n\n\ndict.values()\nReturn list of values\n\n\ndict.items()\nReturn list of tuples (key, value)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeature\nList\nTuple\nDictionary (dict)\nSet\n\n\n\n\nMutable\nYes\nNo\nYes\nYes\n\n\nOrdered\nYes\nYes\nNo\nNo\n\n\nIndexing\nBy index (0-based)\nBy index (0-based)\nBy key\nNo\n\n\nDuplicates\nAllowed\nAllowed\nKeys must be unique\nDuplicates not allowed\n\n\nModification\nCan change elements\nCannot change elements\nValues can be updated\nElements can be added/removed\n\n\nSyntax\nSquare brackets []\nParentheses ()\nCurly braces {}\nCurly braces {}\n\n\nUse Case\nWhen order matters\nWhen data should not change\nMapping keys to values\nFor unique values and set operations\n\n\nExample\n[1, 2, 'three']\n(1, 2, 'three')\n{'name': 'Alice', 'age': 30}\n{'apple', 'banana', 'cherry'}"
  },
  {
    "objectID": "block_1/511_python/511_python.html#inline-for-loop",
    "href": "block_1/511_python/511_python.html#inline-for-loop",
    "title": "Python Basics",
    "section": "",
    "text": "# syntax: [expression for item in list]\n    # syntax: [expression for item in list if condition]\n    # syntax: [expression if condition else other_expression for item in list]\n    words = [\"the\", \"list\", \"of\", \"words\"]\n\n    x = [len(word) for word in words] # [3, 4, 2, 5]\n    x = [word for word in words if len(word) &gt; 2] # [\"the\", \"list\", \"words\"]\n    x = [word if len(word) &gt; 2 else \"short\" for word in words] # [\"the\", \"short\", \"short\", \"words\"]"
  },
  {
    "objectID": "block_1/511_python/511_python.html#inline-if-else",
    "href": "block_1/511_python/511_python.html#inline-if-else",
    "title": "Python Basics",
    "section": "",
    "text": "# syntax: value_if_true if condition else value_if_false\n    words = [\"the\", \"list\", \"of\", \"words\"]\n\n    x = \"long list\" if len(words) &gt; 10 else \"short list\""
  },
  {
    "objectID": "block_1/511_python/511_python.html#try-except",
    "href": "block_1/511_python/511_python.html#try-except",
    "title": "Python Basics",
    "section": "",
    "text": "try:\n        # code that might raise an exception\n    except:\n        # code to handle exception\n        raise TypeError(\"Error message\") # raise exception"
  },
  {
    "objectID": "block_1/511_python/511_python.html#functions",
    "href": "block_1/511_python/511_python.html#functions",
    "title": "Python Basics",
    "section": "",
    "text": "def function_name(arg1, arg2, arg3=default_value): # default values are optional\n        # code\n        return value\n\n    def function_name(*args): # takes in multiple arguments\n        for arg in args:\n            # code\n        return value\n\nside effects: If a function does anything other than returning a value, it is said to have side effects. An example of this is when a function changes the variables passed into it, or when a function prints something to the screen.\n\n\n\n    # Syntax: lambda arg1, arg2: expression\n    lambda x: x+1\n\n\n\n    # NumPy/SciPy style\n    def repeat_string(s, n=2):\n        \"\"\"\n        Repeat the string s, n times.\n\n        Parameters\n        ----------\n        s : str\n            the string\n        n : int, optional\n            the number of times, by default = 2\n\n        Returns\n        -------\n        str\n            the repeated string\n\n        Examples\n        --------\n        &gt;&gt;&gt; repeat_string(\"Blah\", 3)\n        \"BlahBlahBlah\"\n        \"\"\"\n        return s * n\n\n\n\n    def repeat_string(s: str, n: int = 2) -&gt; str:\n        return s * n"
  },
  {
    "objectID": "block_1/511_python/511_python.html#classes",
    "href": "block_1/511_python/511_python.html#classes",
    "title": "Python Basics",
    "section": "",
    "text": "class ClassName:\n        def __init__(self, arg1, arg2):\n            # code\n        def method_name(self, arg1, arg2):\n            # code\n        @classmethod\n        def other_method_name(cls, arg1, arg2):\n            # classmethod is used to create factory methods, aka other ways to create objects\n            # code\n\n    # Inheritance\n    class SubClassName(ClassName):\n        def __init__(self, arg1, arg2):\n            super().__init__(arg1, arg2)\n            # code\n        def method2_name(self, arg1, arg2):\n            # code\n\n\n    class ClassName:\n        static_var = 0\n\n        @staticmethod\n        def method_name(arg1, arg2):\n            # code\n            ClassName.static_var += 1\n            return ClassName.static_var\n        @staticmethod\n        def reset_static_var():\n            ClassName.static_var = 0\n\n\n\n    class TestVector(unittest.TestCase):\n        def test_str1(self):\n            v1 = Vector(1, 2, 3)\n            self.assertIn(\"Vector = [1, 2, 3]\", v1.__str__())\n            self.assertEqual(len(v1.elements), 3)\n\n        def test_str2(self):\n            v1 = Vector(500)\n            self.assertIn(\"Vector = [500]\", v1.__str__())\n\n\n    TestVector = unittest.main(argv=[\"\"], verbosity=0, exit=False)\n    assert TestVector.result.wasSuccessful()"
  },
  {
    "objectID": "block_1/511_python/511_python.html#pep8-guidelines",
    "href": "block_1/511_python/511_python.html#pep8-guidelines",
    "title": "Python Basics",
    "section": "",
    "text": "Category\nRule/Convention\nExample\n\n\n\n\nIndentation\nUse 4 spaces per indentation level\nif x: # four spaces here\n\n\n\nUse spaces around operators and after commas\na = b + c, d = e + f\n\n\nMaximum Line Length\nLimit all lines to a maximum of 79 characters for code, 72 for comments and docstrings\n\n\n\nImports\nAlways put imports at the top of the file\nimport os\n\n\n\nGroup imports: standard, third-party, local\nimport os import numpy as np from . import my_module\n\n\n\nUse absolute imports\nfrom my_pkg import module\n\n\nWhitespace\nAvoid extraneous whitespace\nspam(ham[1], {eggs: 2})\n\n\n\nUse blank lines to separate functions, classes, blocks of code inside functions\n\n\n\nComments\nComments should be complete sentences\n# This is a complete sentence.\n\n\n\nUse inline comments sparingly\nx = x + 1 # Increment x\n\n\nNaming Conventions\nFunction names should be lowercase with underscores\nmy_function()\n\n\n\nClass names should use CapWords convention\nMyClass\n\n\n\nConstants should be in all capital letters\nCONSTANT_NAME\n\n\nString Quotes\nUse double quotes for docstrings and single quotes for everything else when you start a project (or adhere to the project’s conventions)\n‘string’, “““docstring”“”\n\n\nExpressions and Statements\nDon’t use semicolons to terminate statements\nx = 1 (not x = 1;)\n\n\n\nUse is for identity comparisons and == for value comparisons\nif x is None\n\n\nOther Recommendations\nUse built-in types like list, dict instead of List, Dict from the typing module for simple use-cases\ndef func(a: list) -&gt; None:"
  },
  {
    "objectID": "block_1/511_python/511_python.html#numpy-arrays",
    "href": "block_1/511_python/511_python.html#numpy-arrays",
    "title": "Python Basics",
    "section": "Numpy Arrays",
    "text": "Numpy Arrays\n\nDifference with lists:\n\n\n\n\n\n\n\n\nFeature\nNumpy arrays\nLists\n\n\n\n\nData type uniformity\nAll elements must be of the same data type\nNo restriction\n\n\nStorage efficiency\nStored more efficiently\nLess efficient\n\n\nVectorized operations\nSupports\nDoes not support\n\n\n\n\n\nCreating arrays:\n\n\n\n\n\n\n\n\nFunction/Method\nDescription\nExample\n\n\n\n\nnp.array([list], dtype)\nCreate an array from a list\nnp.array([1, 2, 3], dtype='int8')\n\n\nnp.arange(start, stop, step)\nCreate an array of evenly spaced values\nnp.arange(0, 10, 2) returns [0, 2, 4, 6, 8]\n\n\nnp.ones(shape, dtype)\nCreate an array of ones\nnp.ones((3, 2), dtype='int8') returns [[1, 1], [1, 1], [1, 1]]\n\n\nnp.zeros(shape, dtype)\nCreate an array of zeros\n\n\n\nnp.full(shape, fill_value, dtype)\nCreate an array of a specific value\n\n\n\nnp.random.rand(shape)\nCreate an array of random values between 0 and 1\nnp.random.randn(3, 3, 3)\n\n\n\n\n\nOther useful functions:\n\n\n\n\n\n\n\n\nFunction/Method\nDescription\nExample\n\n\n\n\narray.transpose() or array.T\nTranspose an array\n\n\n\narray.ndim\nReturns the number of dimensions\nx = np.ones((3,2)) and print(x.ndim) returns 2\n\n\narray.size\nReturns the number of elements\nprint(x.size) returns 6\n\n\narray.shape\nReturns the shape of the array\nprint(x.shape) returns (3, 2)\n\n\nnp.flip(array)\nReverse an array , default: flips row and cols\nnp.flip(array)\n\n\narray.reshape(shape)\nReshape an array\narray.reshape(2, 3) for 2 rows, 3 columns\n\n\narray.sort()\nSort an array in ascending order\nnew_arr = array.sort()\n\n\narray.flatten()\nFlatten an array, same as reshape(-1)\nnew_arr = array.flatten()\n\n\narray.concatenate()\nConcatenate arrays, default: axis=0 (adds to the bottom)\nnp.concatenate([array1, array2], axis=0)\n\n\n\nNote: For the reshape function, you can use -1 to infer dimension (e.g. array.reshape(-1, 3)). Also, the default is row-major order, but you can specify order='F' for column-major order.\n\n\narray.dtype: returns the data type\narray.astype(dtype): convert an array to a different data type\nnp.array_equal(array1, array2): check if two arrays are equal\n\n\n\nArray operations and broadcasting\n\nsmaller arrays are broadcasted to match the shape of larger arrays \nCan only broadcast if compatible in all dimensions. They are compatible if:\n\nthey are equal in size\none of them is 1\n\nChecks starting from the right-most dimension"
  },
  {
    "objectID": "block_1/511_python/511_python.html#series",
    "href": "block_1/511_python/511_python.html#series",
    "title": "Python Basics",
    "section": "Series",
    "text": "Series\n\nnumpy array with labels\ncan store any data type, string takes the most space\n\nIf any NaN, dtype of Series becomes float64\nif any mixed data types, dtype of Series becomes object\n\npd.Series(): create a Series\n\npd.Series([1, 2, 3], index=['a', 'b', 'c'], name='col1'): create a Series from a list with labels and a name\npd.Series({'a': 1, 'b': 2, 'c': 3}): create a Series from a dictionary\n\ns.index: returns the index\ns.to_numpy(): convert a Series to a numpy array\n\n\nIndexing:\n\ns['a']: returns the value at index ‘a’\ns[['a', 'b']]: returns a Series with values at indices ‘a’ and ‘b’\ns[0:3]: returns a Series with values at indices 0, 1, and 2\n\n\n\nOperations:\n\naligns values based on index\ns1 + s2: returns a Series with values at indices in both s1 and s2\n\nwill return NaN (Not a Number) if index is not in both s1 and s2\nkind of like a left join in SQL"
  },
  {
    "objectID": "block_1/511_python/511_python.html#dataframes",
    "href": "block_1/511_python/511_python.html#dataframes",
    "title": "Python Basics",
    "section": "DataFrames",
    "text": "DataFrames\n\nCreating DataFrames\n\npd.DataFrame([2d list], columns=['col1', 'col2'], index=['row1', 'row2']): creates a DataFrame from a list with column names and row names\n\n\n\n\n\n\n\n\nSource\nCode\n\n\n\n\nLists of lists\npd.DataFrame([['Quan', 7], ['Mike', 15], ['Tiffany', 3]])\n\n\nndarray\npd.DataFrame(np.array([['Quan', 7], ['Mike', 15], ['Tiffany', 3]]))\n\n\nDictionary\npd.DataFrame({\"Name\": ['Quan', 'Mike', 'Tiffany'], \"Number\": [7, 15, 3]})\n\n\nList of tuples\npd.DataFrame(zip(['Quan', 'Mike', 'Tiffany'], [7, 15, 3]))\n\n\nSeries\npd.DataFrame({\"Name\": pd.Series(['Quan', 'Mike', 'Tiffany']), \"Number\": pd.Series([7, 15, 3])})\n\n\nCsv\npd.read_csv('file.csv', sep='\\t')\n\n\n\n\n\nIndexing\n\n\n\n\n\n\n\n\nMethod\nDescription\nExample\n\n\n\n\nSingle Column\nReturns single column as a Series\ndf['col1'] or df.col1\n\n\n\nReturns single column as a DataFrame\ndf[['col1']]\n\n\nMultiple Columns\nReturns multiple columns as a DataFrame\ndf[['col1', 'col2']]\n\n\niloc (integer)\nReturns first row as a Series\ndf.iloc[0]\n\n\n\nReturns first row as a DataFrame\ndf.iloc[0:1] OR df.iloc[[0]]\n\n\n\nReturns specific rows and columns\ndf.iloc[2:5, 1:4] (rows 2-4 and columns 1-3)\n\n\n\nReturns specific rows and columns\ndf.iloc[[0, 2], [0, 2]] (rows 0 and 2 and columns 0 and 2)\n\n\nloc (label)\nReturns all rows and a specific column as a Series\ndf.loc[:, 'col1']\n\n\n\nReturns all rows and a specific column as a DataFrame\ndf.loc[:, ['col1']]\n\n\n\nReturns all rows and specific range of columns as a DataFrame\ndf.loc[:, 'col1':'col3']\n\n\n\nReturns item at row1, col1\ndf.loc['row1', 'col1']\n\n\nBoolean indexing\nReturns rows based on a boolean condition\ndf[df['col1'] &gt; 5]\n\n\nquery\nReturns rows based on a query (same as above)\ndf.query('col1 &gt; 5')\n\n\n\nNote: Indexing with just a single number like df[0] or a slice like df[0:1] without iloc or loc doesn’t work for DataFrame columns.\n\nCan do indexing with boolean with loc: df.loc[:, df['col1'] &gt; 5] Gets all rows and columns where col1 &gt; 5\nWant to *2 for rows in col2 when col1&gt;5: df.loc[df['col1'] &gt; 5, 'col2'] = 0\n\n\n\nOther useful functions\n\n\n\n\n\n\n\n\nFunction/Method\nDescription\nExample\n\n\n\n\nmax()\nReturns the maximum value\ndf['col1'].max()\n\n\nidxmax()\nReturns the index of the maximum value\ndf['col1'].idxmax()\n\n\nmin()\nReturns the minimum value\ndf['col1'].min()\n\n\nidxmin()\nReturns the index of the minimum value\ndf['col1'].idxmin()\n\n\n\nCan return row of max value of col1 by: df.iloc[[df['col1'].idxmax()]] or df.iloc[df.loc[:, 'col1'].idxmax()]"
  },
  {
    "objectID": "block_1/511_python/511_python.html#data-wrangling",
    "href": "block_1/511_python/511_python.html#data-wrangling",
    "title": "Python Basics",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nData Summary\n\nshape: returns (rows, columns)\ninfo(): returns column names, data types, and number of non-null values\ndescribe(): returns summary statistics for each column\n\n\n\nViews vs Copies\n\nCorrect way to replace: df.loc[df['Released_Year'] &gt; 2021, 'Released_Year'] = 2010"
  },
  {
    "objectID": "block_1/511_python/511_python.html#data-manipulation",
    "href": "block_1/511_python/511_python.html#data-manipulation",
    "title": "Python Basics",
    "section": "Data Manipulation",
    "text": "Data Manipulation\n\nrename(): rename columns\n\ndf.rename(columns={'old_name': 'new_name', 'old_name_2': 'new_name_2'}, inplace=True)\ninplace=True to modify DataFrame, instead of returning a new DataFrame, default is False\nrecommended to just assign to a new variable\n\ncolumns: returns column names, can change column names by assigning a list of new names\n\ndf.columns.to_list(): returns column names as list\n\n\n\nChanging Index\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\ndf.set_index('col1', inplace=True)\nSet a column as the index\n\n\ndf = pd.read_csv('file.csv', index_col='col1')\nSet index when reading in a file\n\n\ndf.reset_index()\nReset index to default, starting at 0\n\n\ndf.index = df['col1']\nDirectly modify index\n\n\ndf.index.name = \"a\"\nRename index to ‘a’\n\n\n\n\n\nAdding/ Removing Columns\n\ndrop(): remove columns\n\ndf.drop(['col1', 'col2'], axis=1, inplace=True)\ndf.drop(df.columns[5:], axis=1)\n\ninsert(): insert a column at a specific location\n\ndf.insert(0, 'col1', df['col2'])\n\ndf['new_col'] = df['col1'] + df['col2']: add a new column\n\n\n\nAdding/ Removing Rows\n\ndf.drop([5:], axis=0): remove rows 5 and after\ndf = df.iloc[5:]: returns rows 5 and after\n\n\n\nReshaping Data\n\nmelt(): unpivot a DataFrame from wide to long format\n\ne.g: df_melt = df.melt(id_vars=\"Name\", value_vars=[\"2020\", \"2019\"], var_name=\"Year\", value_name=\"Num_Courses\")\nid_vars: specifies which column should be used as identifier variables (the key)\nvalue_vars: Column(s) to unpivot. If not specified, uses all columns that are not set as id_vars.\nvar_name: select which variables to melt\nvalue_name: select which variables to keep\nignore_index=False: keeps the index, default is True (resets index)\n\npivot(): pivot a DataFrame from long to wide format\n\ne.g: df_pivot = df_melt.pivot(index=\"Name\", columns=\"Year\", values=\"Num_Courses\")\nindex: specifies which column should be used as index\ncolumns: specifies which column should be used as columns\nvalues: specifies which column should be used as values\n\n\nAfter pivot, if want to remove column names, use df.columns.name = None\n\npivot_table(): pivot a DataFrame from long to wide format, but can handle duplicate values\n\ne.g: df_pivot = df.pivot_table(index=\"Name\", columns=\"Year\", values=\"Num_Courses\", aggfunc='sum')\naggfunc: specifies how to aggregate duplicate values\n\nconcat(): concatenate DataFrames\n\ndf = pd.concat([df1, df2], axis=0, ignore_index=True)\naxis=0: concatenate along rows\naxis=1: concatenate along columns\nignore_index=True: ignore index (resets the index), default is False (leaves index as is)\n\nmerge(df1, df2, on='col1', how='inner'): merge DataFrames, analogous to join in R\n\non: specifies which column to merge on\nhow: specifies how to merge\n\ninner: only keep rows that are in both DataFrames\nouter: keep all rows from both DataFrames\nleft: keep all rows from the left DataFrame\nright: keep all rows from the right DataFrame\n\n\n\n\n\nApply Functions\n\ndf.apply(): apply a function to a DataFrame column or row-wise, takes/returns series or df\n\ndf.apply(lambda x: x['col1'] + x['col2'], axis=1): apply a function to each row\ndf.apply(lambda x: x['col1'] + x['col2'], axis=0): apply a function to each column\ndf['col1'].apply(lambda x: x + 1): apply a function to column ‘col1’\n\ndf.applymap(): apply a function to each element in a DataFrame\n\ndf.loc[:, [\"Mean Max Temp (°C)\"]].applymap(int): apply int to each element in column ’Mean Max Temp (°C)\ndf.loc[[\"Mean Max Temp (°C)\"]].astype(int): Faster…\nOnly works for DataFrames, not Series\n\n\n\n\nGrouping Data\n\ngroupby(): group data by a column\n\ndf.groupby('col1'): returns a DataFrameGroupBy object\ndf.groupby('col1').groups: returns a dictionary of groups\ndf.groupby('col1').get_group('group1'): returns a DataFrame of group1\n\ndf.agg(): aggregate data\n\ndf.groupby('col1').agg({'col2': 'mean', 'col3': 'sum'}): returns a DataFrame with mean of col2 and sum of col3 for each group (needs to be numeric, or else error)"
  },
  {
    "objectID": "block_1/511_python/511_python.html#string-dtype",
    "href": "block_1/511_python/511_python.html#string-dtype",
    "title": "Python Basics",
    "section": "String dtype",
    "text": "String dtype\n\ndf.str.func(): can apply any string function to each string in df\n\ne.g. df['col1'].str.lower(): convert all strings in col1 to lowercase\ndf['col1'].str.cat(sep=' '): concatenate all strings in col1 with a space in between, default is no space\n\nCan do regex as well:\n\ndf['col1'].str.contains(r'regex'): returns a boolean Series\ndf['col1'].str.replace(r'regex', 'new_string'): replace all strings in col1 that match regex with ‘new_string’"
  },
  {
    "objectID": "block_1/511_python/511_python.html#datetime-dtype",
    "href": "block_1/511_python/511_python.html#datetime-dtype",
    "title": "Python Basics",
    "section": "Datetime dtype",
    "text": "Datetime dtype\nfrom datetime import datetime, timedelta\n\nConstruct a datetime object: datetime(year, month, day, hour, minute, second)\ndatetime.now(): returns current datetime\ndatetime.strptime('July 9 2005, 13:54', '%B %d %Y, %H:%M'): convert a string to a datetime object\nAdd time to a datetime object: datetime + timedelta(days=1, hours=2, minutes=3, seconds=4)\n\n\nDatetime dtype in Pandas\n\npd.Timestamp('2021-07-09 13:54'): convert a string to a datetime object\n\npd.Timestamp(year, month, day, hour, minute, second): construct a datetime object\npd.Timestamp(datetime(year, month, day, hour, minute, second)): convert a datetime object to a Timestamp object\n\npd.Period('2021-07'): convert a string to a Period object\n\npd.Period(year, month): construct a Period object\npd.Period(datetime(year, month, day, hour, minute, second)): convert a datetime object to a Period objects\n\n\nConverting existing columns to datetime dtype:\n\npd.to_datetime(df['col1']): convert col1 to datetime dtype\npd.read_csv('file.csv', parse_dates=True): convert all columns with datetime dtype to datetime dtype\n\n\n\nOther datetime functions\nThe index of a DataFrame can be a datetime dtype. These functions can be applied to the index.\n\ndf.index.year: returns a Series of years\ndf.index.month: returns a Series of months\n\ndf.index.month_name(): returns a Series of month names\n\ndf.between_time('9:00', '12:00'): returns rows between 9am and 12pm\ndf.resample('D').mean(): resample data to daily and take the mean\n\nD: daily\nW: weekly\nM: monthly\nQ: quarterly\nY: yearly\n\npd.date_range(start, end, freq): returns a DatetimeIndex\n\nfreq same as above (e.g. D, W, M, Q, Y)"
  },
  {
    "objectID": "block_1/511_python/511_python.html#visualization",
    "href": "block_1/511_python/511_python.html#visualization",
    "title": "Python Basics",
    "section": "Visualization",
    "text": "Visualization\n\ndf['Distance'].plot.line(): plot a line chart\ndf['Distance'].plot.bar(): plot a bar chart\ndf['Distance'].cumsum().plot.line(): plot a line chart of cumulative sum"
  },
  {
    "objectID": "block_1/521_platforms/521_platforms.html",
    "href": "block_1/521_platforms/521_platforms.html",
    "title": "Platforms Cheat Sheet",
    "section": "",
    "text": "ls - list files and directories. Default behavior is to list the contents of the current working directory.\ncd - change directory. Used to navigate the filesystem. Default behavior is to change to the home directory.\npwd - print working directory. It will return the absolute path of the current working directory.\nmkdir - make directory\ntouch - create file\nrm - remove file\nrmdir - remove directory\nmv - move file. also used to rename file.\ncp - copy file\nwhich - locate a program. It will return the path of the program.\n\n\n\nThese flags allow us to modify the default behaviour of a program.\n\n-a - all\n-l - long\n-h - human readable\n-r - recursive\n-f - force\n\n\n\n\n\n. - current directory\n.. - parent directory\n~ - home directory\n/ - root directory\n\n\n\n\n\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\nGraphical user interface (GUI)\nA user interface that relies on windows, menus, pointers, and other graphical elements\n\n\nCommand-line interface (CLI)\nA user interface that relies solely on text for commands and output, typically running in a shell.\n\n\nOperating system\nA program that provides a standard interface to whatever hardware it is running on.\n\n\nFilesystem\nThe part of the operating system that manages how files are stored and retrieved. Also used to refer to all of those files and directories or the specific way they are stored.\n\n\nSubdirectory\nA directory that is below another directory\n\n\nParent directory\nThe directory that contains another directory of interest. Going from a directory to its parent, then its parent, and so on eventually leads to the root directory of the filesystem.\n\n\nHome directory\nA directory that contains a user’s files.\n\n\nCurrent working directory\nThe folder or directory location in which the program operates. Any action taken by the program occurs relative to this directory.\n\n\nPath (in filesystem)\nA string that specifies a location in a filesystem.\n\n\nAbsolute path\nA path that points to the same location in the filesystem regardless of where it is evaluated. It is the equivalent of latitude and longitude in geography.\n\n\nRelative path\nA path whose destination is interpreted relative to some other location, such as the current working directory.\n\n\nDirectory\nAn item within a filesystem that can contain files and other directories. Also known as “folder”.\n\n\nRoot directory\nThe directory that contains everything else, either directly or indirectly.\n\n\nPrompt\nThe text printed by the shell that indicates it is ready to accept another command.\n\n\n\n\n\n\n\nSymbol\n\n\n\n\nA. Root directory (see note)\n/\n\n\nB. Parent directory\n..\n\n\nC. Current working directory\n.\n\n\nD. Home directory\n~ \n\n\nE. Command line argument\n-y or --yes\n\n\nF. Prompt (R)\n&gt;\n\n\nG. Prompt (Python)\n&gt;&gt;&gt;\n\n\nH. Prompt (Bash)\n$\n\n\n\n\n\n\n\n\ngit init - initialize a git repository\ngit add - add files to staging area.\n\nStaging area is a place where we can group files together before we “commit” them to git.\n\ngit commit - commit changes to git. Records a new version of the files in the repository.\ngit push - push changes to remote repository from local repository\ngit pull - pull changes from remote repository to local repository\ngit status - check status of git repository\ngit log - check commit history\n\ngit log --oneline - check commit history in one line\ngit log -p - check commit history with changes\n\ngit diff - check difference between two commits\ngit reset - reset git repository\n\ngit reset --hard - reset git repository to last commit\ngit reset --soft - reset git repository to last commit but keep changes\n\ngit revert - revert git repository. The difference between revert and reset is that revert creates a new commit with the changes from the commit we want to revert.\ngit stash - saves changes that you don’t want to commit immediately. It takes the dirty state of your working directory — that is, your modified tracked files and staged changes — and saves it on a stack of unfinished changes that you can reapply at any time.\n\n\n\n\nRepository - a collection of files and folders that are tracked by git.\nCommit - a snapshot of the repository at a specific point in time.\nCommit Hash - These are the commits’ hashes (SHA-1), which are used to uniquely identify the commits within a project.\nBranch - a parallel version of a repository. It is contained within the repository, but does not affect the primary or master branch allowing you to work freely without disrupting the “live” version.\n\n\n\n\n\nPublic key is used to encrypt data and private key is used to decrypt data.\nConfidentiality - only the intended recipient can decrypt the data.\nAuthentication - only the intended recipient can encrypt the data.\n\n\n\n\nSSH is more secure than HTTPS because it uses public and private keys to encrypt and decrypt data. HTTPS uses username and password to authenticate users.\n\n\n\n\nGithub pages will look in either the repository root / directory or in the repository docs/ directory for website content to render.\n\n\n\n\nDynamic Documents: Rooted in Knuth’s “literate programming” concept from 1984.\nMain Goals:\n\nWrite program code.\nCreate narratives to elucidate code function.\n\nBenefits:\n\nEnhances understanding and provides comprehensive documentation.\nGives a way to run code and view results.\nAllows text and code to be combined in a single document.\nFacilitates reproducibility of results and diagrams.\n\nPopular Formats:\n\nJupyter Notebooks (.ipynb)\nRMarkdown documents (.Rmd)\n\nKey Features:\n\nNarratives formatted with markdown.\nExecutable code:\n\nInterwoven in text (RMarkdown’s inline code).\nSeparate sections: code cells (Jupyter) or code chunks (RMarkdown)."
  },
  {
    "objectID": "block_1/521_platforms/521_platforms.html#shell",
    "href": "block_1/521_platforms/521_platforms.html#shell",
    "title": "Platforms Cheat Sheet",
    "section": "",
    "text": "ls - list files and directories. Default behavior is to list the contents of the current working directory.\ncd - change directory. Used to navigate the filesystem. Default behavior is to change to the home directory.\npwd - print working directory. It will return the absolute path of the current working directory.\nmkdir - make directory\ntouch - create file\nrm - remove file\nrmdir - remove directory\nmv - move file. also used to rename file.\ncp - copy file\nwhich - locate a program. It will return the path of the program.\n\n\n\nThese flags allow us to modify the default behaviour of a program.\n\n-a - all\n-l - long\n-h - human readable\n-r - recursive\n-f - force\n\n\n\n\n\n. - current directory\n.. - parent directory\n~ - home directory\n/ - root directory\n\n\n\n\n\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\nGraphical user interface (GUI)\nA user interface that relies on windows, menus, pointers, and other graphical elements\n\n\nCommand-line interface (CLI)\nA user interface that relies solely on text for commands and output, typically running in a shell.\n\n\nOperating system\nA program that provides a standard interface to whatever hardware it is running on.\n\n\nFilesystem\nThe part of the operating system that manages how files are stored and retrieved. Also used to refer to all of those files and directories or the specific way they are stored.\n\n\nSubdirectory\nA directory that is below another directory\n\n\nParent directory\nThe directory that contains another directory of interest. Going from a directory to its parent, then its parent, and so on eventually leads to the root directory of the filesystem.\n\n\nHome directory\nA directory that contains a user’s files.\n\n\nCurrent working directory\nThe folder or directory location in which the program operates. Any action taken by the program occurs relative to this directory.\n\n\nPath (in filesystem)\nA string that specifies a location in a filesystem.\n\n\nAbsolute path\nA path that points to the same location in the filesystem regardless of where it is evaluated. It is the equivalent of latitude and longitude in geography.\n\n\nRelative path\nA path whose destination is interpreted relative to some other location, such as the current working directory.\n\n\nDirectory\nAn item within a filesystem that can contain files and other directories. Also known as “folder”.\n\n\nRoot directory\nThe directory that contains everything else, either directly or indirectly.\n\n\nPrompt\nThe text printed by the shell that indicates it is ready to accept another command.\n\n\n\n\n\n\n\nSymbol\n\n\n\n\nA. Root directory (see note)\n/\n\n\nB. Parent directory\n..\n\n\nC. Current working directory\n.\n\n\nD. Home directory\n~ \n\n\nE. Command line argument\n-y or --yes\n\n\nF. Prompt (R)\n&gt;\n\n\nG. Prompt (Python)\n&gt;&gt;&gt;\n\n\nH. Prompt (Bash)\n$"
  },
  {
    "objectID": "block_1/521_platforms/521_platforms.html#git-and-github",
    "href": "block_1/521_platforms/521_platforms.html#git-and-github",
    "title": "Platforms Cheat Sheet",
    "section": "",
    "text": "git init - initialize a git repository\ngit add - add files to staging area.\n\nStaging area is a place where we can group files together before we “commit” them to git.\n\ngit commit - commit changes to git. Records a new version of the files in the repository.\ngit push - push changes to remote repository from local repository\ngit pull - pull changes from remote repository to local repository\ngit status - check status of git repository\ngit log - check commit history\n\ngit log --oneline - check commit history in one line\ngit log -p - check commit history with changes\n\ngit diff - check difference between two commits\ngit reset - reset git repository\n\ngit reset --hard - reset git repository to last commit\ngit reset --soft - reset git repository to last commit but keep changes\n\ngit revert - revert git repository. The difference between revert and reset is that revert creates a new commit with the changes from the commit we want to revert.\ngit stash - saves changes that you don’t want to commit immediately. It takes the dirty state of your working directory — that is, your modified tracked files and staged changes — and saves it on a stack of unfinished changes that you can reapply at any time.\n\n\n\n\nRepository - a collection of files and folders that are tracked by git.\nCommit - a snapshot of the repository at a specific point in time.\nCommit Hash - These are the commits’ hashes (SHA-1), which are used to uniquely identify the commits within a project.\nBranch - a parallel version of a repository. It is contained within the repository, but does not affect the primary or master branch allowing you to work freely without disrupting the “live” version.\n\n\n\n\n\nPublic key is used to encrypt data and private key is used to decrypt data.\nConfidentiality - only the intended recipient can decrypt the data.\nAuthentication - only the intended recipient can encrypt the data.\n\n\n\n\nSSH is more secure than HTTPS because it uses public and private keys to encrypt and decrypt data. HTTPS uses username and password to authenticate users."
  },
  {
    "objectID": "block_1/521_platforms/521_platforms.html#quarto-and-github-pages",
    "href": "block_1/521_platforms/521_platforms.html#quarto-and-github-pages",
    "title": "Platforms Cheat Sheet",
    "section": "",
    "text": "Github pages will look in either the repository root / directory or in the repository docs/ directory for website content to render."
  },
  {
    "objectID": "block_1/521_platforms/521_platforms.html#dynamic-documents",
    "href": "block_1/521_platforms/521_platforms.html#dynamic-documents",
    "title": "Platforms Cheat Sheet",
    "section": "",
    "text": "Dynamic Documents: Rooted in Knuth’s “literate programming” concept from 1984.\nMain Goals:\n\nWrite program code.\nCreate narratives to elucidate code function.\n\nBenefits:\n\nEnhances understanding and provides comprehensive documentation.\nGives a way to run code and view results.\nAllows text and code to be combined in a single document.\nFacilitates reproducibility of results and diagrams.\n\nPopular Formats:\n\nJupyter Notebooks (.ipynb)\nRMarkdown documents (.Rmd)\n\nKey Features:\n\nNarratives formatted with markdown.\nExecutable code:\n\nInterwoven in text (RMarkdown’s inline code).\nSeparate sections: code cells (Jupyter) or code chunks (RMarkdown)."
  },
  {
    "objectID": "block_1/521_platforms/521_platforms.html#rstudio-basics",
    "href": "block_1/521_platforms/521_platforms.html#rstudio-basics",
    "title": "Platforms Cheat Sheet",
    "section": "RStudio Basics",
    "text": "RStudio Basics\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\ngetwd()\nReturns the current working directory of the R session.\n\n\nsetwd(path)\nChanges the working directory to the specified path.\n\n\nhere::here()\nCreates file paths relative to the project’s root (where the .Rproj file is) to ensure consistent and portable references.\n\n\n\nNote: For portability, prefer here::here() over setwd() to avoid path inconsistencies across different systems.\n\nRStudio code chunks\n\nGlobal looks like this:"
  },
  {
    "objectID": "block_1/521_platforms/521_platforms.html#quarto",
    "href": "block_1/521_platforms/521_platforms.html#quarto",
    "title": "Platforms Cheat Sheet",
    "section": "Quarto",
    "text": "Quarto\n\n\n\n\n\n\n\n\n\n\nFeature/Aspect\nJupyter Notebooks\nRMarkdown\nQuarto (.qmd)\n\n\n\n\nPrimary Language\nPython\nR\nPython, R, Julia\n\n\nSecondary Language\nR (via R kernel)\nPython (via reticulate)\nR with Python (via reticulate), Python with R (via rpy2)\n\n\nCompatible Editors\nJupyterLab, VS Code\nRStudio\nRStudio, VS Code, JupyterLab\n\n\nSpecial Features\n-\n-\nSingle engine processing, cross-language integration\n\n\nRecommended Environments\nJupyterLab or VS Code\nRStudio\nRStudio (offers code-completion, incremental cell execution, and other tools for working with executable code)\n\n\n\n\nRMarkdown Templates\n\nOn top of the RMarkdown document, you can specify a template.\nTemplates are .Rmd files that contain the YAML header and some default text.\n\n---\ntitle: \"Untitled\"\noutput: github_document / html_document / pdf_document / word_document\nauthor: \"farrandi\"\ndate: \"10/2/2023\"\n---\n\n\nBasic Quarto presentation:\n# Same YAML header as above\n---\ntitle: \"521 Quiz 2\"\nauthor: \"Daniel Chen\"\nformat: revealjs\n---\n\n# In the morning\n\n## Getting up\n\n- Turn off alarm\n- Get out of bed\n\n## Breakfast\n\n- Eat eggs\n- Drink coffee\n\n# In the evening\n\n## Dinner\n\n- Eat spaghetti\n- Drink wine\n\n## Going to sleep\n\n- Get in bed\n- Count sheep"
  },
  {
    "objectID": "block_1/521_platforms/521_platforms.html#presentations-in-jupyterlab",
    "href": "block_1/521_platforms/521_platforms.html#presentations-in-jupyterlab",
    "title": "Platforms Cheat Sheet",
    "section": "Presentations in JupyterLab",
    "text": "Presentations in JupyterLab\n\nJupyterLab supports presentations using the JavaScript framework: reveal.js.\nreveal.js is the same framework used by Quarto.\nCells for presentations are marked via the property inspector:\n\nFound at the settings wheel in the left side panel.\nSelect slide type from the dropdown menu.\n\nreveal.js presentations are two dimensional:\n\nHorizontal slides\nVertical sub-slides\n\n\n\nSlide Types and Navigation\n\n\n\n\n\n\n\n\nSlide Type\nDescription\nNavigation\n\n\n\n\nSlide\nStandard slide\nLeft and right arrows\n\n\nSub-slide\nSub-topic of a slide\nUp and down arrows\n\n\nFragment\nAnimated part of the previous slide, e.g. a bullet\nPart of slide animation\n\n\n- (or empty)\nAppears in same cell as previous slide\nPart of slide\n\n\nNotes\nSpeaker notes\nVisible when pressing ‘t’\n\n\nSkip\nNot included in the presentation\n-\n\n\n\n\n\nImage Inclusion Workaround\n\nImages using ![]() or &lt;img&gt; tags don’t show up in exports.\nWorkaround: Paste images into a Markdown cell to include them as attachments. This ensures visibility in HTML and slide exports."
  },
  {
    "objectID": "block_1/521_platforms/521_platforms.html#virtual-environments",
    "href": "block_1/521_platforms/521_platforms.html#virtual-environments",
    "title": "Platforms Cheat Sheet",
    "section": "Virtual Environments",
    "text": "Virtual Environments\n\nVirtual Environments: Isolated Python environments that allow for the installation of packages without affecting the system’s Python installation.\nBenefits:\n\nIsolation: Packages installed in a virtual environment are isolated from the system’s Python installation.\nReproducibility: Virtual environments can be shared with others to ensure reproducibility.\nVersion control: Allow managing the versions of libraries and tools used in a project.\nCross-platform: Ensures that the project’s dependencies are consistent across different systems.\nExperimentation: Allows for experimentation with different versions of packages.\nClean environment: When starting a new project, starts with a clean slate.\nConsistency: Ensures that the project’s dependencies are consistent across different systems.\nSecurity: Isolates the project’s dependencies from the system’s Python installation.\n\n\n\nPython: Conda\n\nconda create -n &lt;env_name&gt; python=&lt;version&gt;: create a new environment\n\nconda env create -f path/to/environment.yml: create an environment from a file\nconda create --name live_env --clone test_env: create an environment from an existing environment\n\nconda env list: list all environments\nconda activate &lt;env_name&gt;: activate the environment\nconda deactivate: deactivate the environment\nconda remove -n &lt;env_name&gt; --all: remove the environment\nconda env export -f environment.yml: export the environment to a file\n\nManaging packages:\n\nconda config --add channels conda-forge: add a channel\nconda list: list all packages in the environment\nconda search &lt;package&gt;: search for a package\nconda install &lt;package&gt;: install a package\n\nconda install &lt;package&gt;=&lt;version&gt;: install a specific version of a package\n\nconda remove &lt;package&gt;: remove a package\n\nExample environment.yml file:\nname: test_env\nchannels:\n  - conda-forge\n  - defaults\ndependencies:\n  - conda\n  - python=3.7\n  - pandas==1.0.2\n  - jupyterlab\n\n\n\n\n\n\n\nComponent\nDescription\n\n\n\n\nname\n- Identifies the environment’s name. - Useful for distinguishing multiple environments.\n\n\nchannels\n- Locations where Conda searches for packages. - Default: defaults channel. - Popular options: conda-forge, bioconda.\n\n\ndependencies\n- Lists required packages for the environment. - Can specify versions or ranges. - Can include Conda or pip packages.\n\n\nprefix\n- (Optional) Directory where Conda installs the environment. - Defaults to Conda’s main directory if not provided.\n\n\n\n\n\nR: renv\n\nMake a new project in RStudio 1.1. Select setting to use renv 1.2. library(renv): to use renv\nrenv::init(): initialize the project"
  },
  {
    "objectID": "block_1/521_platforms/521_platforms.html#file-names",
    "href": "block_1/521_platforms/521_platforms.html#file-names",
    "title": "Platforms Cheat Sheet",
    "section": "File names",
    "text": "File names\n3 Principles:\n\nMachine readable:\n\nregex and globbing friendly (avoid spaces, special characters, case sensitivity, etc.)\ndeliberate use of delimiters (e.g. _, -, .)\n\nHuman readable: Helps other people and ourselves in the future quickly understand the file structure and contents of a project/ file.\nPlays well with default ordering: Makes files more organized and easily searchable. Easy for us humans to find the files we are looking for.\n\nDates go: YYYY-MM-DD"
  },
  {
    "objectID": "block_1/521_platforms/521_platforms.html#asking-questions",
    "href": "block_1/521_platforms/521_platforms.html#asking-questions",
    "title": "Platforms Cheat Sheet",
    "section": "Asking Questions",
    "text": "Asking Questions\n\nReproducible example\nCode formatting\nMinimal, complete, verifiable example\n\nEffective Questioning & Creating an MRE:\n\nSearch for similar questions before asking.\nClearly state the problem in the title and provide brief details in the body.\nProvide the shortest version of your code that replicates the error.\nInclude definitions if you’ve used functions or classes.\nUse toy datasets rather than real data.\nUse markdown for code to ensure readability and syntax highlighting.\nShare attempts, points of confusion, and full error tracebacks."
  },
  {
    "objectID": "block_1/521_platforms/521_platforms.html#regex",
    "href": "block_1/521_platforms/521_platforms.html#regex",
    "title": "Platforms Cheat Sheet",
    "section": "Regex",
    "text": "Regex"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Made by @farrandi\nThis is a list of cheatsheets from my classes in the Master of Data Science program at the University of British Columbia."
  },
  {
    "objectID": "list.html",
    "href": "list.html",
    "title": "List of Cheat Sheet",
    "section": "",
    "text": "Course Code.\nBlock #\nTitle\n\n\n\n\n511\n1\nIntro to Python\n\n\n521\n1\nPlatforms\n\n\n523\n1\nR Programming\n\n\n551\n1\nStatistics and Probability"
  },
  {
    "objectID": "block_1/523_R/523_R.html",
    "href": "block_1/523_R/523_R.html",
    "title": "R Programming Cheatsheet",
    "section": "",
    "text": "read_csv(url): reads a csv file\n\nread_csv(url, col_types = cols()): reads a csv file with no column types\nread_csv(url, col_types = cols(col_name = col_type)): reads a csv file with column types\nread_csv(url, skip = n, n_max = m): reads a csv file skipping n rows and reading m rows\n\nread_csv2(url): reads a csv file with a comma as decimal separator\nread_tsv(url): reads a tsv file\nread_delim(url, delim = \"\"): reads a file with a delimiter\n\n\n\n\n\nread_excel(file_path, sheet=\"name\"): reads an excel file\n\nto read url need to do download.file(url, destfile = \"file.xlsx\", mode = \"wb\")\n\n\n\n\n\n\nclean_names(df): cleans column names to match them with R conventions (e.g., col_name1)\n\n\n\n\n\nselect(df, col_name1, col_name2): selects cols\nfilter(df, col_name1 == \"value\", col_name2 &gt; 5): filters rows\n\nfilter(df, col_name1 %in% c(\"value1\", \"value2\")): filters if col_name1 is in a vector of values\n\narrange(df, col_name1): sorts rows, default is ascending\n\narrange(df, desc(col_name1)): sorts rows descending\n\nmutate(df, new_col_name = col_name1 + col_name2): creates new cols\nslice(df, 1:10): selects rows\n\nslice(df, 1): selects first row\n\npull(df, col_name1): extracts a column as a vector\n\n\n\n\n\nstr_detect(df$col_name, \"value\"): detects if a string contains a value\nstr_subset(df$col_name, \"value\"): subsets a string if it contains a value\nstr_split(df$col_name, \"value\"): splits a string by a value\n\nstr_split_fixed(df$col_name, \"value\", n): splits a string by a value and returns n columns (gets character matrix)\n\nseparate(df, col_name, into = c(\"new_col_name1\", \"new_col_name2\"), sep = \"value\"): separates a column into two columns\nstr_length(df$col_name): gets length of string\nstr_sub(df$col_name, start = n, end = m): gets substring from n to m\nstr_c(df$col_name1, df$col_name2, sep = \"value\"): concatenates two strings\n\nstr_c(df$col_name1, sep = \"value\", collapse = \"value\"): concatenates vector of string and collapses them into one string\n\nstr_replace(df$col_name, \"value\", \"new_value\"): replaces a value in a string\n\n\n\n\n\nfct_drop(df$col_name): drops unused levels\nfct_infreq(df$col_name): orders levels by frequency\nfct_reorder(df$col_name, df$col_name2): orders levels by another column\nfct_relevel(df$col_name, \"value\"): moves a level to the front\nfct_rev(df$col_name): reverses order of levels\n\n\n\n\n\npivot_longer(df, cols = c(col_name1, col_name2), names_to = \"new_col_name\", values_to = \"new_col_name\"): pivots cols to rows\npivot_wider(df, names_from = \"col_name1\", values_from = \"col_name2\"): pivots rows to cols\n\n\n\n\nCriteria:\n\nEach row is a single observation\nEach variable is a single column\nEach value is a single cell\n\n\n\n\n\nwe use &lt;- to assign values to variables.\nThis is because when we do median(x &lt;- c(1, 2, 3)) x is assigned to c(1, 2, 3) globally. \n\n\n\nobjects that contain 1 or more elements of the same type\nelements are ordered\nHeirarchy for coercion: character &gt; double &gt; integer &gt; logical\nto change type of vector use as.character(), as.double(), as.integer(), as.logical()\nto check if vector is of a certain type use is.character(), is.double(), is.integer(), is.logical()\nto check length of vector use length()\nto check type of vector use typeof()\n\nCan get vector from df using: df$col_name\n\n\n\nname &lt;- c(\"a\", \"b\", \"c\")\nname[1] # \"a\"\nname[2:3] # \"b\" \"c\"\nname[-1] # \"b\" \"c\"\nname[length(name)] # \"c\"]\n\n# Also...\nx &lt;- c(1, 2, 3)\ny &lt;- x\n\ny[3] &lt;- 4\ny\n#&gt; [1] 1 2 4\n\n\n\n\n\nTibles inherit from data frames but are more strict. They are more consistent and have better printing.\nImportant properties:\n\nTibbles only output first 10 rows and all columns that fit on screen\nwhen you subset a tibble you always get a tibble, in data frames you get a vector\n\n\n\n\nuses lubridate package\n\ntoday(): gets today’s date, class is Date\nnow(): gets today’s date and time, class is POSIXct\nymd(), ydm(), mdy(), myd(), dmy(), dym(): converts character to date\nymd_hms(): converts character to date and time\nCan mutate date: dates |&gt; mutate = make_date(year, month, day)\nwdays(): gets day of week\n\nwdays(date, label = TRUE): gets abbreviated day of week (e.g., Mon)\nwday(date, label = TRUE, abbr = FALSE): gets day of week as full name (e.g., Monday)\n\nmdays(): gets day of month\nydays(): gets day of year\n\n\n\n\n\nbind_rows(df1, df2): binds rows of two dfs\nbind_cols(df1, df2): binds cols of two dfs\ninner_join(df1, df2, by = \"col_name\"): joins two dfs by col_name, only keeps rows that match\nleft_join(df1, df2, by = \"col_name\"): joins two dfs by col_name, keeps all rows from df1\nsemi_join(df1, df2, by = \"col_name\"): joins two dfs by col_name, keeps only column names from df1, only keeps rows that match\nanti_join(df1, df2, by = \"col_name\"): joins two dfs by col_name, keeps only column names from df1, keeps only rows that don’t match\nfull_join(df1, df2, by = \"col_name\"): joins two dfs by col_name, keeps all rows from both dfs\n\n\n\n\n\n\n\ncase_when(): selectively modify column values based on conditions\n\ngapminder |&gt;\n    mutate(country = case_when(country == \"Cambodia\" ~ \"Kingdom of Cambodia\",\n    # only work if country is character (not factor)\n                            TRUE ~ country))\n\n# For multiple values\ngapminder |&gt;\n    mutate(continent = case_when(continent == \"Asia\" ~ \"Asie\",\n                                 continent == \"Europe\" ~ \"L'Europe\",\n                                 continent == \"Africa\" ~ \"Afrique\",\n                                 TRUE ~ continent)) #This is to keep the original value (not NA)\n\n\n\n\n\n\n\n\n\n\n\nCommand\nDescription\nExample\n\n\n\n\ndrop_na()\nRemove rows based on NA in cols x to y\ndf %&gt;% drop_na(x:y)\n\n\n\nRemove rows if any column has NA\ndf %&gt;% drop_na()\n\n\n\n\n\n\n\n\nsummarise() or summarize(): returns a single value for each group\ngroup_by(): groups rows by a column\n\n# calculate the average life expectancy for the entire dataset\ngapminder |&gt;\n    summarise(mean_life_exp = mean(lifeExp))\n\n# calculate the average life expectancy for each continent and year\ngapminder |&gt;\n    group_by(continent, year) |&gt;\n    summarise(mean_life_exp = mean(lifeExp, na.rm = TRUE))\n    # na.rm = TRUE removes NAs from calculation\n\n# does not collapse the data frame, compute with group\ngapminder %&gt;%\n    group_by(country) %&gt;%\n    mutate(life_exp_gain = lifeExp - first(lifeExp)) %&gt;%\n    # first() returns the first value of a vector\n    head()\n\n\n\n\n\nmap(df, mean, na.rm = TRUE): retuirns a list\n\nna.rm = TRUE removes NAs from calculation\n\nmap_dfc(df, median): returns a tibble\nmap_dbl(df, max): returns a double vector\n\nCan use anonymous functions with map():\n# Long form\nmap_*(data, function(arg) function_being_called(arg, other_arg))\n# e.g.\nmap_df(data_entry, function(vect) str_replace(vect, pattern = \"Cdn\", replacement = \"Canadian\"))\n\n# short form\nmap_*(data, ~ function_being_called(., other_arg))\n# e.g.\nmap_df(data_entry, ~str_replace(., pattern = \"Cdn\", replacement = \"Canadian\"))\n\n\n\n\nHas roxygen comments, same as python docstrings\n\n#' Calculates the variance of a vector of numbers.\n#'\n#' Calculates the sample variance of data generated from a normal/Gaussian distribution,\n#' omitting NA's in the data.\n#'\n#' @param data numeric vector of numbers whose length is &gt; 1.\n#'\n#' @return numeric vector of length one, the variance.\n#'\n#' @examples\n#' variance(c(1, 2, 3))\nvariance &lt;- function(observations) {\n  if (!is.numeric(observations)) {\n    # Throws an error\n    stop(\"All inputs must be numeric.\")\n  }\n  sum((observations - mean(observations)) ^ 2) / (length(observations) - 1)\n}\n\nName Masking: if a variable is defined in the function, it will be used instead of the global variable\n\nif not in function, looks one level up, until it reaches the global environment\n\nR looks for values when the function is run, not when it is defined\nEach run is independent of the other\nLazy Evaluation: R only evaluates the arguments that are needed\n\nforce() forces R to evaluate an argument\n\n\n\n\n\ntest_that(\"Message to print if test fails\", expect_*(...))\n\ntest_that('variance expects a numeric vector', {\n    expect_error(variance(list(1, 2, 3)))\n    expect_error(variance(data.frame(1, 2, 3)))\n    expect_error(variance(c(\"one\", \"two\", \"three\")))\n})\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\nexpect_identical\nTest two objects for being exactly equal\n\n\nexpect_equal\nCompare R objects x and y testing ‘near equality’ (can set a tolerance)\n\n\n\n- expect_equal(x, y, tolerance = 0.00001)\n\n\nexpect_equivalent\nCompare R objects x and y testing ‘near equality’ (can set a tolerance) and does not assess attributes\n\n\nexpect_error\nTests if an expression throws an error\n\n\nexpect_warning\nTests whether an expression outputs a warning\n\n\nexpect_output\nTests that print output matches a specified value\n\n\nexpect_true\nTests if the object returns TRUE\n\n\nexpect_false\nTests if the object returns FALSE\n\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\nsource(\"path/to/script.R\")\nTake functions from another script\n\n\nlibrary(package_name)\nImport a package\n\n\n\n\n\n(function(x) x + 1)(1) (see purrr package for examples)\n\n\n\n\n# create a nested data frame\nby_country &lt;- gapminder %&gt;%\n    group_by(continent, country) %&gt;%\n    nest() # turns all other columns into a column called data (list of data frames)\nCommon workflow:\n\ngroup_by() + nest() to create a nested data frame\nmutate() + map() to add new columns\nunnest() to return to a regular data frame\n\nweather |&gt;\n# step 1\n  group_by(origin, month) |&gt;\n  nest() |&gt;\n# step 2\n  mutate(min_temp = map_dbl(data, ~min(.$temp, na.rm = T)),\n         max_temp = map_dbl(data, ~max(.$temp, na.rm = T)),\n         avg_temp = map_dbl(data, ~mean(.$temp, na.rm = T)))\n# step 3\nunnest(avg_temp) # only unnest if we get some intermediate list-columns from map\nAlternative to above code:\nweather_nested_2 &lt;- weather |&gt;\n  group_by(origin, month) |&gt;\n  summarise(min_temp = min(temp, na.rm = T),\n            max_temp = max(temp, na.rm = T),\n            avg_temp = mean(temp, na.rm = T))\n\n\n\nmetaprogramming: writing code that writes code\nWith tidyverse, they have a feautre called “non-standard evaluation” (NSE). Part of this is data masking.\n\nData Masking: data frame is promised to be first argument (data mask)\n\ncolumns act as if they are variables, filter(gapminder, country == \"Canada\", year == 1952)\nchecks dataframe first before global environment\n\nDelay in Evaluation: expressions are captured and evaluated later\nenquo(): quotes the argument\nsym(): turns column name into a function as a string\n!!: unquotes the argument\n{{ arg_name }}: unquotes and quotes the argument\n:=: Walrus operator - needed when assigning values\n\n# e.g.\nfilter_gap &lt;- function(col, val) {\n    col &lt;- enquo(col)\n    filter(gapminder, !!col == val)\n}\n\n# better way\nfilter_gap &lt;- function(col, val) {\n    filter(gapminder, {{col}} == val)\n}\n\nfilter_gap(country, \"Canada\")\n# e.g. of walrus operator\nfunction(data, group, col, fun) {\n    data %&gt;%\n        group_by({{ group }}) %&gt;%\n        summarise( {{ col }} := fun({{ col }}))\n}\n\n\n\nif passing varibales to tidyverse functions, use ...\n\nwhen variable not used in logical comparisons or variable assignment\n\nshould be last argument in function\ncan add multiple arguments\n\n\n\nsort_gap &lt;- function(x, ...) {\n    print(x + 1)\n    arrange(gapminder, ...)\n}\n\nsort_gap(1, year, continent, country)"
  },
  {
    "objectID": "block_1/523_R/523_R.html#r-packages",
    "href": "block_1/523_R/523_R.html#r-packages",
    "title": "R Programming Cheatsheet",
    "section": "",
    "text": "read_csv(url): reads a csv file\n\nread_csv(url, col_types = cols()): reads a csv file with no column types\nread_csv(url, col_types = cols(col_name = col_type)): reads a csv file with column types\nread_csv(url, skip = n, n_max = m): reads a csv file skipping n rows and reading m rows\n\nread_csv2(url): reads a csv file with a comma as decimal separator\nread_tsv(url): reads a tsv file\nread_delim(url, delim = \"\"): reads a file with a delimiter\n\n\n\n\n\nread_excel(file_path, sheet=\"name\"): reads an excel file\n\nto read url need to do download.file(url, destfile = \"file.xlsx\", mode = \"wb\")\n\n\n\n\n\n\nclean_names(df): cleans column names to match them with R conventions (e.g., col_name1)\n\n\n\n\n\nselect(df, col_name1, col_name2): selects cols\nfilter(df, col_name1 == \"value\", col_name2 &gt; 5): filters rows\n\nfilter(df, col_name1 %in% c(\"value1\", \"value2\")): filters if col_name1 is in a vector of values\n\narrange(df, col_name1): sorts rows, default is ascending\n\narrange(df, desc(col_name1)): sorts rows descending\n\nmutate(df, new_col_name = col_name1 + col_name2): creates new cols\nslice(df, 1:10): selects rows\n\nslice(df, 1): selects first row\n\npull(df, col_name1): extracts a column as a vector\n\n\n\n\n\nstr_detect(df$col_name, \"value\"): detects if a string contains a value\nstr_subset(df$col_name, \"value\"): subsets a string if it contains a value\nstr_split(df$col_name, \"value\"): splits a string by a value\n\nstr_split_fixed(df$col_name, \"value\", n): splits a string by a value and returns n columns (gets character matrix)\n\nseparate(df, col_name, into = c(\"new_col_name1\", \"new_col_name2\"), sep = \"value\"): separates a column into two columns\nstr_length(df$col_name): gets length of string\nstr_sub(df$col_name, start = n, end = m): gets substring from n to m\nstr_c(df$col_name1, df$col_name2, sep = \"value\"): concatenates two strings\n\nstr_c(df$col_name1, sep = \"value\", collapse = \"value\"): concatenates vector of string and collapses them into one string\n\nstr_replace(df$col_name, \"value\", \"new_value\"): replaces a value in a string\n\n\n\n\n\nfct_drop(df$col_name): drops unused levels\nfct_infreq(df$col_name): orders levels by frequency\nfct_reorder(df$col_name, df$col_name2): orders levels by another column\nfct_relevel(df$col_name, \"value\"): moves a level to the front\nfct_rev(df$col_name): reverses order of levels\n\n\n\n\n\npivot_longer(df, cols = c(col_name1, col_name2), names_to = \"new_col_name\", values_to = \"new_col_name\"): pivots cols to rows\npivot_wider(df, names_from = \"col_name1\", values_from = \"col_name2\"): pivots rows to cols\n\n\n\n\nCriteria:\n\nEach row is a single observation\nEach variable is a single column\nEach value is a single cell"
  },
  {
    "objectID": "block_1/523_R/523_R.html#assignment-environment",
    "href": "block_1/523_R/523_R.html#assignment-environment",
    "title": "R Programming Cheatsheet",
    "section": "",
    "text": "we use &lt;- to assign values to variables.\nThis is because when we do median(x &lt;- c(1, 2, 3)) x is assigned to c(1, 2, 3) globally. \n\n\n\nobjects that contain 1 or more elements of the same type\nelements are ordered\nHeirarchy for coercion: character &gt; double &gt; integer &gt; logical\nto change type of vector use as.character(), as.double(), as.integer(), as.logical()\nto check if vector is of a certain type use is.character(), is.double(), is.integer(), is.logical()\nto check length of vector use length()\nto check type of vector use typeof()\n\nCan get vector from df using: df$col_name\n\n\n\nname &lt;- c(\"a\", \"b\", \"c\")\nname[1] # \"a\"\nname[2:3] # \"b\" \"c\"\nname[-1] # \"b\" \"c\"\nname[length(name)] # \"c\"]\n\n# Also...\nx &lt;- c(1, 2, 3)\ny &lt;- x\n\ny[3] &lt;- 4\ny\n#&gt; [1] 1 2 4"
  },
  {
    "objectID": "block_1/523_R/523_R.html#tibbles-vs-data-frames",
    "href": "block_1/523_R/523_R.html#tibbles-vs-data-frames",
    "title": "R Programming Cheatsheet",
    "section": "",
    "text": "Tibles inherit from data frames but are more strict. They are more consistent and have better printing.\nImportant properties:\n\nTibbles only output first 10 rows and all columns that fit on screen\nwhen you subset a tibble you always get a tibble, in data frames you get a vector"
  },
  {
    "objectID": "block_1/523_R/523_R.html#dates-and-times",
    "href": "block_1/523_R/523_R.html#dates-and-times",
    "title": "R Programming Cheatsheet",
    "section": "",
    "text": "uses lubridate package\n\ntoday(): gets today’s date, class is Date\nnow(): gets today’s date and time, class is POSIXct\nymd(), ydm(), mdy(), myd(), dmy(), dym(): converts character to date\nymd_hms(): converts character to date and time\nCan mutate date: dates |&gt; mutate = make_date(year, month, day)\nwdays(): gets day of week\n\nwdays(date, label = TRUE): gets abbreviated day of week (e.g., Mon)\nwday(date, label = TRUE, abbr = FALSE): gets day of week as full name (e.g., Monday)\n\nmdays(): gets day of month\nydays(): gets day of year"
  },
  {
    "objectID": "block_1/523_R/523_R.html#joining-data",
    "href": "block_1/523_R/523_R.html#joining-data",
    "title": "R Programming Cheatsheet",
    "section": "",
    "text": "bind_rows(df1, df2): binds rows of two dfs\nbind_cols(df1, df2): binds cols of two dfs\ninner_join(df1, df2, by = \"col_name\"): joins two dfs by col_name, only keeps rows that match\nleft_join(df1, df2, by = \"col_name\"): joins two dfs by col_name, keeps all rows from df1\nsemi_join(df1, df2, by = \"col_name\"): joins two dfs by col_name, keeps only column names from df1, only keeps rows that match\nanti_join(df1, df2, by = \"col_name\"): joins two dfs by col_name, keeps only column names from df1, keeps only rows that don’t match\nfull_join(df1, df2, by = \"col_name\"): joins two dfs by col_name, keeps all rows from both dfs"
  },
  {
    "objectID": "block_1/523_R/523_R.html#change-or-remove-specific-values",
    "href": "block_1/523_R/523_R.html#change-or-remove-specific-values",
    "title": "R Programming Cheatsheet",
    "section": "",
    "text": "case_when(): selectively modify column values based on conditions\n\ngapminder |&gt;\n    mutate(country = case_when(country == \"Cambodia\" ~ \"Kingdom of Cambodia\",\n    # only work if country is character (not factor)\n                            TRUE ~ country))\n\n# For multiple values\ngapminder |&gt;\n    mutate(continent = case_when(continent == \"Asia\" ~ \"Asie\",\n                                 continent == \"Europe\" ~ \"L'Europe\",\n                                 continent == \"Africa\" ~ \"Afrique\",\n                                 TRUE ~ continent)) #This is to keep the original value (not NA)\n\n\n\n\n\n\n\n\n\n\n\nCommand\nDescription\nExample\n\n\n\n\ndrop_na()\nRemove rows based on NA in cols x to y\ndf %&gt;% drop_na(x:y)\n\n\n\nRemove rows if any column has NA\ndf %&gt;% drop_na()"
  },
  {
    "objectID": "block_1/523_R/523_R.html#iterate-over-groups-of-rows",
    "href": "block_1/523_R/523_R.html#iterate-over-groups-of-rows",
    "title": "R Programming Cheatsheet",
    "section": "",
    "text": "summarise() or summarize(): returns a single value for each group\ngroup_by(): groups rows by a column\n\n# calculate the average life expectancy for the entire dataset\ngapminder |&gt;\n    summarise(mean_life_exp = mean(lifeExp))\n\n# calculate the average life expectancy for each continent and year\ngapminder |&gt;\n    group_by(continent, year) |&gt;\n    summarise(mean_life_exp = mean(lifeExp, na.rm = TRUE))\n    # na.rm = TRUE removes NAs from calculation\n\n# does not collapse the data frame, compute with group\ngapminder %&gt;%\n    group_by(country) %&gt;%\n    mutate(life_exp_gain = lifeExp - first(lifeExp)) %&gt;%\n    # first() returns the first value of a vector\n    head()"
  },
  {
    "objectID": "block_1/523_R/523_R.html#purrr-package",
    "href": "block_1/523_R/523_R.html#purrr-package",
    "title": "R Programming Cheatsheet",
    "section": "",
    "text": "map(df, mean, na.rm = TRUE): retuirns a list\n\nna.rm = TRUE removes NAs from calculation\n\nmap_dfc(df, median): returns a tibble\nmap_dbl(df, max): returns a double vector\n\nCan use anonymous functions with map():\n# Long form\nmap_*(data, function(arg) function_being_called(arg, other_arg))\n# e.g.\nmap_df(data_entry, function(vect) str_replace(vect, pattern = \"Cdn\", replacement = \"Canadian\"))\n\n# short form\nmap_*(data, ~ function_being_called(., other_arg))\n# e.g.\nmap_df(data_entry, ~str_replace(., pattern = \"Cdn\", replacement = \"Canadian\"))"
  },
  {
    "objectID": "block_1/523_R/523_R.html#functions",
    "href": "block_1/523_R/523_R.html#functions",
    "title": "R Programming Cheatsheet",
    "section": "",
    "text": "Has roxygen comments, same as python docstrings\n\n#' Calculates the variance of a vector of numbers.\n#'\n#' Calculates the sample variance of data generated from a normal/Gaussian distribution,\n#' omitting NA's in the data.\n#'\n#' @param data numeric vector of numbers whose length is &gt; 1.\n#'\n#' @return numeric vector of length one, the variance.\n#'\n#' @examples\n#' variance(c(1, 2, 3))\nvariance &lt;- function(observations) {\n  if (!is.numeric(observations)) {\n    # Throws an error\n    stop(\"All inputs must be numeric.\")\n  }\n  sum((observations - mean(observations)) ^ 2) / (length(observations) - 1)\n}\n\nName Masking: if a variable is defined in the function, it will be used instead of the global variable\n\nif not in function, looks one level up, until it reaches the global environment\n\nR looks for values when the function is run, not when it is defined\nEach run is independent of the other\nLazy Evaluation: R only evaluates the arguments that are needed\n\nforce() forces R to evaluate an argument\n\n\n\n\n\ntest_that(\"Message to print if test fails\", expect_*(...))\n\ntest_that('variance expects a numeric vector', {\n    expect_error(variance(list(1, 2, 3)))\n    expect_error(variance(data.frame(1, 2, 3)))\n    expect_error(variance(c(\"one\", \"two\", \"three\")))\n})\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\nexpect_identical\nTest two objects for being exactly equal\n\n\nexpect_equal\nCompare R objects x and y testing ‘near equality’ (can set a tolerance)\n\n\n\n- expect_equal(x, y, tolerance = 0.00001)\n\n\nexpect_equivalent\nCompare R objects x and y testing ‘near equality’ (can set a tolerance) and does not assess attributes\n\n\nexpect_error\nTests if an expression throws an error\n\n\nexpect_warning\nTests whether an expression outputs a warning\n\n\nexpect_output\nTests that print output matches a specified value\n\n\nexpect_true\nTests if the object returns TRUE\n\n\nexpect_false\nTests if the object returns FALSE"
  },
  {
    "objectID": "block_1/523_R/523_R.html#importing-packages-or-scripts",
    "href": "block_1/523_R/523_R.html#importing-packages-or-scripts",
    "title": "R Programming Cheatsheet",
    "section": "",
    "text": "Command\nDescription\n\n\n\n\nsource(\"path/to/script.R\")\nTake functions from another script\n\n\nlibrary(package_name)\nImport a package\n\n\n\n\n\n(function(x) x + 1)(1) (see purrr package for examples)"
  },
  {
    "objectID": "block_1/523_R/523_R.html#nested-data-frames",
    "href": "block_1/523_R/523_R.html#nested-data-frames",
    "title": "R Programming Cheatsheet",
    "section": "",
    "text": "# create a nested data frame\nby_country &lt;- gapminder %&gt;%\n    group_by(continent, country) %&gt;%\n    nest() # turns all other columns into a column called data (list of data frames)\nCommon workflow:\n\ngroup_by() + nest() to create a nested data frame\nmutate() + map() to add new columns\nunnest() to return to a regular data frame\n\nweather |&gt;\n# step 1\n  group_by(origin, month) |&gt;\n  nest() |&gt;\n# step 2\n  mutate(min_temp = map_dbl(data, ~min(.$temp, na.rm = T)),\n         max_temp = map_dbl(data, ~max(.$temp, na.rm = T)),\n         avg_temp = map_dbl(data, ~mean(.$temp, na.rm = T)))\n# step 3\nunnest(avg_temp) # only unnest if we get some intermediate list-columns from map\nAlternative to above code:\nweather_nested_2 &lt;- weather |&gt;\n  group_by(origin, month) |&gt;\n  summarise(min_temp = min(temp, na.rm = T),\n            max_temp = max(temp, na.rm = T),\n            avg_temp = mean(temp, na.rm = T))"
  },
  {
    "objectID": "block_1/523_R/523_R.html#tidy-evaluation",
    "href": "block_1/523_R/523_R.html#tidy-evaluation",
    "title": "R Programming Cheatsheet",
    "section": "",
    "text": "metaprogramming: writing code that writes code\nWith tidyverse, they have a feautre called “non-standard evaluation” (NSE). Part of this is data masking.\n\nData Masking: data frame is promised to be first argument (data mask)\n\ncolumns act as if they are variables, filter(gapminder, country == \"Canada\", year == 1952)\nchecks dataframe first before global environment\n\nDelay in Evaluation: expressions are captured and evaluated later\nenquo(): quotes the argument\nsym(): turns column name into a function as a string\n!!: unquotes the argument\n{{ arg_name }}: unquotes and quotes the argument\n:=: Walrus operator - needed when assigning values\n\n# e.g.\nfilter_gap &lt;- function(col, val) {\n    col &lt;- enquo(col)\n    filter(gapminder, !!col == val)\n}\n\n# better way\nfilter_gap &lt;- function(col, val) {\n    filter(gapminder, {{col}} == val)\n}\n\nfilter_gap(country, \"Canada\")\n# e.g. of walrus operator\nfunction(data, group, col, fun) {\n    data %&gt;%\n        group_by({{ group }}) %&gt;%\n        summarise( {{ col }} := fun({{ col }}))\n}\n\n\n\nif passing varibales to tidyverse functions, use ...\n\nwhen variable not used in logical comparisons or variable assignment\n\nshould be last argument in function\ncan add multiple arguments\n\n\n\nsort_gap &lt;- function(x, ...) {\n    print(x + 1)\n    arrange(gapminder, ...)\n}\n\nsort_gap(1, year, continent, country)"
  },
  {
    "objectID": "block_1/551_stats-and-prob/551_stats.html",
    "href": "block_1/551_stats-and-prob/551_stats.html",
    "title": "Statistics and Probability Cheat Sheet",
    "section": "",
    "text": "Statistics and Probability Cheat Sheet\n\n&lt;div id=\"quarto-navigation-envelope\" class=\"hidden\"&gt;\n&lt;p&gt;&lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar-title\"&gt;MDS cheatsheets&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar-title\"&gt;MDS cheatsheets&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:Home\"&gt;Home&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/index.html\"&gt;/index.html&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:List of Cheat Sheet\"&gt;List of Cheat Sheet&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar:/list.html\"&gt;/list.html&lt;/span&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div id=\"quarto-meta-markdown\" class=\"hidden\"&gt;\n&lt;p&gt;&lt;span class=\"hidden\" data-render-id=\"quarto-twittercardtitle\"&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-ogcardtitle\"&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-metasitename\"&gt;MDS cheatsheets&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-twittercarddesc\"&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-ogcardddesc\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n\n&lt;/main&gt; &lt;!-- /main --&gt;\n&lt;script id = \"quarto-html-after-body\" type=\"application/javascript\"&gt;\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const toggleBodyColorMode = (bsSheetEl) =&gt; {\n    const mode = bsSheetEl.getAttribute(\"data-mode\");\n    const bodyEl = window.document.querySelector(\"body\");\n    if (mode === \"dark\") {\n      bodyEl.classList.add(\"quarto-dark\");\n      bodyEl.classList.remove(\"quarto-light\");\n    } else {\n      bodyEl.classList.add(\"quarto-light\");\n      bodyEl.classList.remove(\"quarto-dark\");\n    }\n  }\n  const toggleBodyColorPrimary = () =&gt; {\n    const bsSheetEl = window.document.querySelector(\"link#quarto-bootstrap\");\n    if (bsSheetEl) {\n      toggleBodyColorMode(bsSheetEl);\n    }\n  }\n  toggleBodyColorPrimary();  \n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const isCodeAnnotation = (el) =&gt; {\n    for (const clz of el.classList) {\n      if (clz.startsWith('code-annotation-')) {                     \n        return true;\n      }\n    }\n    return false;\n  }\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    text: function(trigger) {\n      const codeEl = trigger.previousElementSibling.cloneNode(true);\n      for (const childEl of codeEl.children) {\n        if (isCodeAnnotation(childEl)) {\n          childEl.remove();\n        }\n      }\n      return codeEl.innerText;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    var currentTitle = button.getAttribute(\"title\");\n    button.setAttribute(\"title\", \"Copied!\");\n    let tooltip;\n    if (window.bootstrap) {\n      button.setAttribute(\"data-bs-toggle\", \"tooltip\");\n      button.setAttribute(\"data-bs-placement\", \"left\");\n      button.setAttribute(\"data-bs-title\", \"Copied!\");\n      tooltip = new bootstrap.Tooltip(button, \n        { trigger: \"manual\", \n          customClass: \"code-copy-button-tooltip\",\n          offset: [0, -8]});\n      tooltip.show();    \n    }\n    setTimeout(function() {\n      if (tooltip) {\n        tooltip.hide();\n        button.removeAttribute(\"data-bs-title\");\n        button.removeAttribute(\"data-bs-toggle\");\n        button.removeAttribute(\"data-bs-placement\");\n      }\n      button.setAttribute(\"title\", currentTitle);\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    const config = {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      arrow: false,\n      appendTo: function(el) {\n          return el.parentElement;\n      },\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    };\n    window.tippy(el, config); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i&lt;noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      // use id or data attribute instead here\n      let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');\n      try { href = new URL(href).hash; } catch {}\n      const id = href.replace(/^#\\/?/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n      let selectedAnnoteEl;\n      const selectorForAnnotation = ( cell, annotation) =&gt; {\n        let cellAttr = 'data-code-cell=\"' + cell + '\"';\n        let lineAttr = 'data-code-annotation=\"' +  annotation + '\"';\n        const selector = 'span[' + cellAttr + '][' + lineAttr + ']';\n        return selector;\n      }\n      const selectCodeLines = (annoteEl) =&gt; {\n        const doc = window.document;\n        const targetCell = annoteEl.getAttribute(\"data-target-cell\");\n        const targetAnnotation = annoteEl.getAttribute(\"data-target-annotation\");\n        const annoteSpan = window.document.querySelector(selectorForAnnotation(targetCell, targetAnnotation));\n        const lines = annoteSpan.getAttribute(\"data-code-lines\").split(\",\");\n        const lineIds = lines.map((line) =&gt; {\n          return targetCell + \"-\" + line;\n        })\n        let top = null;\n        let height = null;\n        let parent = null;\n        if (lineIds.length &gt; 0) {\n            //compute the position of the single el (top and bottom and make a div)\n            const el = window.document.getElementById(lineIds[0]);\n            top = el.offsetTop;\n            height = el.offsetHeight;\n            parent = el.parentElement.parentElement;\n          if (lineIds.length &gt; 1) {\n            const lastEl = window.document.getElementById(lineIds[lineIds.length - 1]);\n            const bottom = lastEl.offsetTop + lastEl.offsetHeight;\n            height = bottom - top;\n          }\n          if (top !== null && height !== null && parent !== null) {\n            // cook up a div (if necessary) and position it \n            let div = window.document.getElementById(\"code-annotation-line-highlight\");\n            if (div === null) {\n              div = window.document.createElement(\"div\");\n              div.setAttribute(\"id\", \"code-annotation-line-highlight\");\n              div.style.position = 'absolute';\n              parent.appendChild(div);\n            }\n            div.style.top = top - 2 + \"px\";\n            div.style.height = height + 4 + \"px\";\n            let gutterDiv = window.document.getElementById(\"code-annotation-line-highlight-gutter\");\n            if (gutterDiv === null) {\n              gutterDiv = window.document.createElement(\"div\");\n              gutterDiv.setAttribute(\"id\", \"code-annotation-line-highlight-gutter\");\n              gutterDiv.style.position = 'absolute';\n              const codeCell = window.document.getElementById(targetCell);\n              const gutter = codeCell.querySelector('.code-annotation-gutter');\n              gutter.appendChild(gutterDiv);\n            }\n            gutterDiv.style.top = top - 2 + \"px\";\n            gutterDiv.style.height = height + 4 + \"px\";\n          }\n          selectedAnnoteEl = annoteEl;\n        }\n      };\n      const unselectCodeLines = () =&gt; {\n        const elementsIds = [\"code-annotation-line-highlight\", \"code-annotation-line-highlight-gutter\"];\n        elementsIds.forEach((elId) =&gt; {\n          const div = window.document.getElementById(elId);\n          if (div) {\n            div.remove();\n          }\n        });\n        selectedAnnoteEl = undefined;\n      };\n      // Attach click handler to the DT\n      const annoteDls = window.document.querySelectorAll('dt[data-target-cell]');\n      for (const annoteDlNode of annoteDls) {\n        annoteDlNode.addEventListener('click', (event) =&gt; {\n          const clickedEl = event.target;\n          if (clickedEl !== selectedAnnoteEl) {\n            unselectCodeLines();\n            const activeEl = window.document.querySelector('dt[data-target-cell].code-annotation-active');\n            if (activeEl) {\n              activeEl.classList.remove('code-annotation-active');\n            }\n            selectCodeLines(clickedEl);\n            clickedEl.classList.add('code-annotation-active');\n          } else {\n            // Unselect the line\n            unselectCodeLines();\n            clickedEl.classList.remove('code-annotation-active');\n          }\n        });\n      }\n  const findCites = (el) =&gt; {\n    const parentEl = el.parentElement;\n    if (parentEl) {\n      const cites = parentEl.dataset.cites;\n      if (cites) {\n        return {\n          el,\n          cites: cites.split(' ')\n        };\n      } else {\n        return findCites(el.parentElement)\n      }\n    } else {\n      return undefined;\n    }\n  };\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i&lt;bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const citeInfo = findCites(ref);\n    if (citeInfo) {\n      tippyHover(citeInfo.el, function() {\n        var popup = window.document.createElement('div');\n        citeInfo.cites.forEach(function(cite) {\n          var citeDiv = window.document.createElement('div');\n          citeDiv.classList.add('hanging-indent');\n          citeDiv.classList.add('csl-entry');\n          var biblioDiv = window.document.getElementById('ref-' + cite);\n          if (biblioDiv) {\n            citeDiv.innerHTML = biblioDiv.innerHTML;\n          }\n          popup.appendChild(citeDiv);\n        });\n        return popup.innerHTML;\n      });\n    }\n  }\n});\n&lt;/script&gt;\n&lt;/div&gt; &lt;!-- /content --&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;"
  }
]